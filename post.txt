GETTING POSTS
=============

You can retrieve a single post or a list of posts using the JSON API.
Your site name:
https://[site_url]

Example:
https://mysite.com/api/post
https://mysite.com/api/posts

Get a single post
-----------------
GET /api/post

Parameters:
* permalink
-or-
* zid

Get a list of posts
-------------------
GET /api/posts

Parameters:
* type (optional)
* subtype (optional)
* search (optional - keywords for searching)
* sort (optional - default is pubdate) options: updated|oldest|alpha|newest|type|subtype|pubdate
* limit (optional - default is 100 posts) max 1000 posts
* page (optional - default 1)

CHECK IF A POST EXISTS
======================

You can check if a post (or posts) exists.

Form Action:
/api/post_exists/v1

Method:
GET

Required Fields:
* fields[]

Returns:
Status 200 or 404 and test "found" or "not found"

Example:
fields[src] = "foo"
fields[src_id] = "bar"
fields[type] = "blog"

Note:
If calling by api, you need to encode the fields
"http://mysite.com/api/post_exists/v1?fields%5Btype%5D=blogger"

CREATING POSTS
==============

You can create a new post on any page by preparing a form with these attributes.

Form Action:
/api/post/v1

Method:
POST

Required Fields
* title
* type
* return_url - The URL to go to when the lead form is successful
* failure_url - The URL to return to when the lead form failed
* customer[email] - email address of the person filling this form (if person is logged in, not needed)
* customer[name] - name of the person filling the form (if person is logged in, not needed)

NOTE:
Customer[xxxxxx] information will only be added once. 
If the customer already exists in the system, this information 
will not overwrite what's already there. 
Create a profile update form to deal with that.
If the person is already logged into the site, these will be ignored.

CUSTOM DATA:
* data[xxxxx]
Example
<input type="text" name="data[age]" value="123">

ADDITIONAL NOTES:
* cover_image (an upload field with the main image for the post)
* pubdate = "now" (will publish the post -- don't do this unless you really want to)
* files[] (a list of files that you want to attach to the post -- typically images, but can be any kind of file)

ADDITIONAL ADDITIONAL NOTES:
return_url 
You can add an __id__, __zid__, or __permlaink__ in the return_url template.
Example: "/foo?id=__id__"

POST PROCESSING
===============
You can call some code to process your code
* process - the permalink of an elixir process to further do processing

NEW POST NOTIFICATION
=====================
You can send a generic email notification when a new post has been created.
Add the hidden (or other) field:
* notify (single email address to send notification)

LIST OF ALL FIELDS
==================

A full list of attributes for each post

You can access in liquid templates as in
Single Post page: 
<h1>{{post.title}}</h1>

Multiple post pages will have 
{{posts}}

{% for post in posts %}
  <p>{{post.title}}</p>
{% endfor %}

RELATED FIELDS
--------------
* created_by - all the information from users table about this person who created the post
* user_site - the user_site information for this user. Includes username, etc

BASE
----
* id
* zid
* source_id
* type
* subtype
* subtype
* permalink
* category_id (unused)

BODY
----
* title
* subtitle
* description
* content
* url
* meta_title
* meta_description

MEDIA
-----
* cover_image 
* cover_video
* files[] (alias: photos[])

DATES
-----
* pubdate (_pubdate)
* created_by
* updated_by
* inserted_at (cannot change)
* updated_at (cannot change)
* expires

ADDRESS
-------
* place_id
* lat
* lng
* address
* email
* phone
* city
* country_code
* region

COMMERCE
--------
* price
* currency
* price_info
* action

META
----
* user_id
* meta
* ip
* up
* views
* clicks
* opens
* src
* src_id
* meta1 - meta6
